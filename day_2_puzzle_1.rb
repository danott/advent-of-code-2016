require "minitest"
require "minitest/autorun"

class SquarePad
  def left(digit)
    next_digit = digit - 1
    (next_digit % 3).zero? ? digit : next_digit
  end

  def right(digit)
    next_digit = digit + 1
    (next_digit % 3) == 1 ? digit : next_digit
  end

  def up(digit)
    next_digit = digit - 3
    next_digit <= 0 ? digit : next_digit
  end

  def down(digit)
    next_digit = digit + 3
    next_digit >= 10 ? digit : next_digit
  end
end

class DiamondPad
  def left(digit)
    case digit
    when 3, 4, 6, 7, 8, 9
      digit - 1
    when "B"
      "A"
    when "C"
      "B"
    else
      digit
    end
  end

  def right(digit)
    if [2, 3, 5, 6, 7, 8, "A", "B"].include?(digit)
      digit.next
    else
      digit
    end
  end

  def up(digit)
    case digit
    when 3
      1
    when 6, 7, 8
      digit - 4
    when "A", "B", "C"
      digit.ord - 59
    when "D"
      "B"
    else
      digit
    end
  end

  def down(digit)
    case digit
    when 1
      3
    when 2, 3, 4
      digit + 4
    when 6, 7, 8
      (digit + 59).chr
    when "B"
      "D"
    else
      digit
    end
  end
end

def to_lines(input)
  input.split("\n").map(&:strip)
end

def to_commands(input)
  input.chars
end

def handle(command, digit, handler)
  case command
  when "U"
    handler.up(digit)
  when "D"
    handler.down(digit)
  when "L"
    handler.left(digit)
  when "R"
    handler.right(digit)
  else
    fail "Unknown command: #{command}"
  end
end

def decode(input, handler = SquarePad.new)
  digit = 5
  to_lines(input).reduce("") do |memo, line|
    to_commands(line).each do |command|
      digit = handle(command, digit, handler)
    end
    memo + digit.to_s
  end
end

class KeypadTest < Minitest::Test
  def input
    <<-INPUT
      ULL
      RRDDD
      LURDL
      UUUUD
    INPUT
  end

  def test_example
    assert_equal "1985", decode(input)
  end

  def test_diamond
    assert_equal "5DB3", decode(input, DiamondPad.new)
  end
end

input = <<-INPUT
LLULLLRLDLLLRLUURDDLRDLDURULRLUULUDDUDDLLLURRLDRRLDRRRLDUDLRDLRRDLLDUDUDUDRLUDUUDLLLRDURUDUULUDLRDUUUDUUDURLDUULLRDLULDUURUDRDDLDRLURLRURRDUURLRLUURURUUULLRLLULRUURLULURDLLRRUDLUDULDRDRLRULUURRDRULLRUUUDLRLDLUURRRURDLUDDRRUDRLUDRDLLLLLRULLDUDRLRRDDULDLRUURRRRRLDLDLRDURDRUUURDLRDDDDULURRRRDUURLULLLDLRULRDULRUDLRRLRDLLRLLLUDDLRDRURDDLLLLDUDRDLRURRDLRDDDLDULDRLRULUUDRRRUUULLLURRDDUULURULDURRLLULLDRURUUULRLRDRRUDRDRRDURRUUUULDRDDDUDLDDURLLRR
LDLRRRUURDLDDRLRRDLLULRULLLUDUUDUDLRULLDRUDRULLDULURDRDDLRURDDULLLLDLRDRDRDDURLURLURLUDRDDRDULULUDDRURRDLLDUURDRDDLRLLURRDLRDDULDLULURDRDLUDRRUUDULLULURRDUDRUUUDRULDLDURLRRUDURLDLRRUURRRURDLUDRLDUDRRUDUURURUDDUUDRDULRDLUDRRRLDRURLLRDDDLUDRDUDURDDDRRDDRRRLLRRDDLDDLRUURRURDLLDRLRRDLLUDRRRURURLRDRLLRLRLRULLRURLDLRRULLRRRDULUUULDRDLLURDDLDLRDRLUUDLLUDDLDRRLDLRUDRUDLLUURLLULURUDUDRLULLUDRURDDLDLDDUDLRDDRRURLRLLUDDUDRUURRURRULDRLDDRLLRRLDDURRDLDULLLURULLLRUURLRRRRUUULRLLLURRLRLRUDRDUUUDUUUDDLULLDLLLLDLDRULDRUUULDDDLURLDLRLULRUDDDDURDDLU
RURLURRDLDULLULDDDLRUULLUURLRUDRUDRRUDDLDDDDRRDLRURLRURLDDDUDDUURRDRULDRRRULRDRDDLRUDULRLURDUUDRRLDLRDRURDLDRRRRDRURUUDDDLLRDRDUDUDUDLLULURULRRLRURUULUULDDDDURULRULLRUDUURLURDUDLUDLUDRLLDUUDUULRLRLUUDRDULDULRURDRRRULRUDLRURDDULUDULLRLRURURUULLULDRURLLRRUUDDUUURRDLURUURULRDRRDDUDULRDDLUDLURURUURDRULLRDDLLRDDLDRDUDRRDLUURRLRLUURRULUDURLDDRLLURRDDDLDDRURULLDDRLUDDLRLURDUDULLRDULLLDLLUDDRUDRUDDUUDRDRULRL
RLRDRDULULUDLUDRDRLUDLDLLUDURULDDDUDLRURLLRLRLDLDRLDURDLRRURLULLULURLLDRRDRLUDRLRDLLULRULURRURURUULRDUDLLRDLRRRRRLUURDRRRDLRUDLLDLLDLRUUUDLLLDDDLRDULLRUUDDRLDDURRRDLRLRLDDDDLRDRULLUURUUDRRLLRLLRDDLLRURRRRDRULRRLLRLLLRLDRRLDDDURRURLDURUURRLRLRLDRURULLRLRUDLDUURDLLRLDLURUUUDLLRDRDDDDDDRLDRRRLRRRRURUDLDDRDLLURUDLRRLDDDLUDUDUULRDULULUDDULUUDLLLLRLDDUUULRLRDULURDURRRURRULURRRDRDLDDURDLURUDURRRDDRLRLUDLUDDLUULLDURLURDDUDDLRUUUDRLLDRURL
ULUDLLUDDULRUURDRURDUDUDLUURDDDRRLUDURURDRURRLDRDURLRLLRRDDRRDRRRUULURUDURUDULRRRRDDLDURRLRRDUDDDRLLLULDRLRLURRDUURDURRRURRDLUDUDDRLDLURRRDDRLLRDRDDRDURRRRLURRLUDDURRULRUDUDULDRUDDRULLUUULDURRRLDRULLURULLRUDLDUDDLDULDLUUDRULULDLLDRULLRUULDUDUUDRLRRLDLUULUDLLDDRLRRDDLLURURDULRRDDRURDRLRLULDLDURULLUUUDURURDLDUDDDDUUULUDLUURRULLDLRLURDLURLRLDDURRLDDRRRDUUULLUULDLLDLLDDRLRRUDLULDRLULDULULRRLRULUUURURUUURDUUDDURLLUDDRLRDDLUURRUULRDLDDRLULUULRDRURLUURDRDUURUDLRR
INPUT

square_result = decode(input)
puts "SQUARE RESULT: #{square_result}"

diamond_result = decode(input, DiamondPad.new)
puts "DIAMOND RESULT: #{diamond_result}"
